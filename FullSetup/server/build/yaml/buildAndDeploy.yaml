# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.
#
# Starter pipeline
# Minimal pipeline to deploy a basic assistant bot that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
#

trigger:
  - none

pool:
  vmImage: ubuntu-latest

# Parameters with defaults formatted as $(name) get their values
# from variables of that name defined in the Azure DevOps pipeline UI.
parameters:
  - name: azureServiceConnection
    displayName: Azure service connection
    type: string
    default: $(AZURESERVICECONNECTION)

  - name: botName
    displayName: Bot name
    type: string
    default: $(BOTNAME)

  - name: microsoftAppId
    displayName: Bot"s Microsoft app ID
    type: string
    default: $(MICROSOFTAPPID)

  - name: microsoftAppPassword
    displayName: Bot"s Microsoft app password
    type: string
    default: $(MICROSOFTAPPPASSWORD)

  - name: resourceGroupName
    displayName: Azure resource group
    type: string
    default: $(RESOURCEGROUPNAME)

  - name: functionAppName
    displayName: Azure function app name
    type: string
    default: $(FUNCTIONAPPNAME)

  - name: botProjectDirectory
    displayName: Relative path to the bot's csproj file (e.g. BasicAssistant/BasicAssistant)
    type: string
    default: $(BOTPROJECTDIRECTORY)

  - name: botProjectName
    displayName: Bot"s project name (csproj)
    type: string
    default: $(BOTPROJECTNAME)

  - name: buildYamlDirectory
    displayName: Relative path to the pipeline's .yaml folder (e.g. build/yaml)
    type: string
    default: $(BUILDYAMLDIRECTORY)

  # LUIS Parameters
  # LUIS Authoring (used to build, train and publish LUIS models)
  - name: luisAuthoringKey
    displayName: LUIS authoring key
    type: string
    default: $(LUISAUTHORINGKEY)

  - name: luisAuthoringRegion
    displayName: LUIS authoring region
    type: string
    default: $(LUISAUTHORINGREGION)

  # LUIS Runtime (used to access LUIS while the bot is running)
  - name: luisEndpoint
    displayName: LUIS endpoint
    type: string
    default: $(LUISENDPOINT)

  - name: luisEndpointKey
    displayName: LUIS endpoint key
    type: string
    default: $(LUISENDPOINTKEY)

  # QnAMaker parameters
  - name: qnaSubscriptionKey
    displayName: QnA Maker subscription key
    type: string
    default: $(QNASUBSCRIPTIONKEY)

  - name: qnaEndpointKey
    displayName: QnA Maker endpoint key
    type: string
    default: $(QNAENDPOINTKEY)

  - name: qnaHostName
    displayName: QnA Maker host name
    type: string
    default: $(QNAHOSTNAME)

  - name: qnaKnowledgebaseId
    displayName: QnA Maker knowledgebase ID
    type: string
    default: $(QNAKNOWLEDGEBASEID)

  - name: qnaRegion
    displayName: QnA Maker region
    type: string
    default: $(QNAREGION)

stages:
- stage: BuildStage
  jobs:
  - job: buildApps
    steps:
    - template: templates/installPrerequisites.yaml
    - template: templates/crossTrainLUISModels.yaml
      parameters:
        sourceDirectory: "$(System.DefaultWorkingDirectory)/${{ parameters.botProjectDirectory }}"
        yamlDirectory: "$(System.DefaultWorkingDirectory)/${{ parameters.buildYamlDirectory }}"
        botName: "${{ parameters.botName }}"
        luisAuthoringKey: "${{ parameters.luisAuthoringKey }}"
        luisAuthoringRegion: "${{ parameters.luisAuthoringRegion }}"
        qnaSubscriptionKey: "${{ parameters.qnaSubscriptionKey }}"

    - template: templates/buildAzureFunctionApp.yaml
      parameters:
        azureServiceConnection: "${{ parameters.azureServiceConnection }}"
        functionAppName: "${{ parameters.functionAppName }}"
        resourceGroupName: "${{ parameters.resourceGroupName }}"
        botProjectFile: "$(System.DefaultWorkingDirectory)/${{ parameters.botProjectDirectory }}/${{ parameters.botProjectName }}"
        botName: "${{ parameters.botName }}"
        microsoftAppId: "${{ parameters.microsoftAppId }}"
        microsoftAppPassword: "${{ parameters.microsoftAppPassword }}"
        luisEndpoint: "${{ parameters.luisEndpoint }}"
        luisEndpointKey: "${{ parameters.luisEndpointKey }}"
        qnaSubscriptionKey: "${{ parameters.qnaSubscriptionKey }}"
        qnaEndpointKey: "${{ parameters.qnaEndpointKey }}"
        qnaHostName: "${{ parameters.qnaHostName }}"
        qnaKnowledgebaseId: "${{ parameters.qnaKnowledgebaseId }}"
        qnaRegion: "${{ parameters.qnaRegion }}"

    # Helper to output the working folder directory contents for diagnostics
    - task: PowerShell@2
      displayName: "Dir workspace"
      continueOnError: true
      condition: succeededOrFailed()
      inputs:
        targetType: "inline"
        script: |
          cd ..
          ls -R
  
- stage: DeployDevStage
  # variables:
  # - group: bot-dev-var-group
  dependsOn: BuildStage
  jobs:
  - job: PrintSystemVariables
    steps:
    - task: PowerShell@2
      displayName: "Print system variables"
      inputs:
        targetType: "inline"
        script: |
          Write-Host "Agent.BuildDirectory: $(Agent.BuildDirectory)"
          Write-Host "Agent.HomeDirectory: $(Agent.HomeDirectory)"
          Write-Host "Agent.Id: $(Agent.Id)"
          Write-Host "Agent.JobStatus: $(Agent.JobStatus)"
          Write-Host "Agent.MachineName: $(Agent.MachineName)"
          Write-Host "Agent.Name: $(Agent.Name)"
          Write-Host "Agent.OS: $(Agent.OS)"
          Write-Host "Agent.OSArchitecture: $(Agent.OSArchitecture)"
          Write-Host "Agent.TempDirectory: $(Agent.TempDirectory)"
          Write-Host "Agent.ToolsDirectory: $(Agent.ToolsDirectory)"
          Write-Host "Agent.WorkFolder: $(Agent.WorkFolder)"
          Write-Host "Build.ArtifactStagingDirectory: $(Build.ArtifactStagingDirectory)"
          Write-Host "Build.BuildId: $(Build.BuildId)"
          Write-Host "Build.BuildNumber: $(Build.BuildNumber)"
          Write-Host "Build.BuildUri: $(Build.BuildUri)"
          Write-Host "Build.BinariesDirectory: $(Build.BinariesDirectory)"
          Write-Host "Build.ContainerId: $(Build.ContainerId)"
          Write-Host "Build.DefinitionName: $(Build.DefinitionName)"
          Write-Host "Build.DefinitionVersion: $(Build.DefinitionVersion)"
          Write-Host "Build.QueuedBy: $(Build.QueuedBy)"
          Write-Host "Build.QueuedById: $(Build.QueuedById)"
          Write-Host "Build.Reason: $(Build.Reason)"
          Write-Host "Build.Repository.LocalPath: $(Build.Repository.LocalPath)"
          Write-Host "Build.Repository.ID: $(Build.Repository.ID)"
          Write-Host "Build.Repository.Name: $(Build.Repository.Name)"
          Write-Host "Build.Repository.Provider: $(Build.Repository.Provider)"
          Write-Host "Build.Repository.Uri: $(Build.Repository.Uri)"
          Write-Host "Build.RequestedFor: $(Build.RequestedFor)"
          Write-Host "Build.RequestedForEmail): $(Build.RequestedForEmail)"
          Write-Host "Build.RequestedForId: $(Build.RequestedForId)"
          Write-Host "Build.SourceBranch: $(Build.SourceBranch)"
          Write-Host "Build.SourceBranchName: $(Build.SourceBranchName)"
          Write-Host "Build.SourcesDirectory: $(Build.SourcesDirectory)"
          Write-Host "Build.SourceVersion: $(Build.SourceVersion)"
          Write-Host "Build.SourceVersionMessage): $(Build.SourceVersionMessage)"
          Write-Host "Build.StagingDirectory: $(Build.StagingDirectory)"
          Write-Host "Build.Repository.Git.SubmoduleCheckout: $(Build.Repository.Git.SubmoduleCheckout)"
          Write-Host "Checks.StageAttempt: $(Checks.StageAttempt)"
          Write-Host "Common.TestResultsDirectory: $(Common.TestResultsDirectory)"
          Write-Host "Environment.Name: $(Environment.Name)"
          Write-Host "Environment.Id: $(Environment.Id)"
          Write-Host "Environment.ResourceName: $(Environment.ResourceName)"
          Write-Host "Environment.ResourceId: $(Environment.ResourceId)"
          Write-Host "Pipeline.Workspace: $(Pipeline.Workspace)"
          Write-Host "Strategy.Name: $(Strategy.Name)"
          Write-Host "Strategy.CycleName: $(Strategy.CycleName)"
          Write-Host "System.AccessToken: $(System.AccessToken)"
          Write-Host "System.CollectionId: $(System.CollectionId)"
          Write-Host "System.CollectionUri: $(System.CollectionUri)"
          Write-Host "System.DefaultWorkingDirectory: $(System.DefaultWorkingDirectory)"
          Write-Host "System.DefinitionId: $(System.DefinitionId)"
          Write-Host "System.HostType: $(System.HostType)"
          Write-Host "System.JobAttempt: $(System.JobAttempt)"
          Write-Host "System.JobDisplayName: $(System.JobDisplayName)"
          Write-Host "System.JobId: $(System.JobId)"
          Write-Host "System.JobName: $(System.JobName)"
          Write-Host "System.PhaseAttempt: $(System.PhaseAttempt)"
          Write-Host "System.PhaseDisplayName: $(System.PhaseDisplayName)"
          Write-Host "System.PhaseName: $(System.PhaseName)"
          Write-Host "System.PlanId: $(System.PlanId)"
          Write-Host "System.PullRequest.IsFork: $(System.PullRequest.IsFork)"
          Write-Host "System.PullRequest.PullRequestId: $(System.PullRequest.PullRequestId)"
          Write-Host "System.PullRequest.PullRequestNumber: $(System.PullRequest.PullRequestNumber)"
          Write-Host "System.PullRequest.SourceBranch: $(System.PullRequest.SourceBranch)"
          Write-Host "System.PullRequest.SourceRepositoryURI: $(System.PullRequest.SourceRepositoryURI)"
          Write-Host "System.PullRequest.TargetBranch: $(System.PullRequest.TargetBranch)"
          Write-Host "System.StageAttempt: $(System.StageAttempt)"
          Write-Host "System.StageDisplayName: $(System.StageDisplayName)"
          Write-Host "System.StageName: $(System.StageName)"
          Write-Host "System.TeamFoundationCollectionUri: $(System.TeamFoundationCollectionUri)"
          Write-Host "System.TeamProject: $(System.TeamProject)"
          Write-Host "System.TeamProjectId: $(System.TeamProjectId)"
          Write-Host "System.TimelineId: $(System.TimelineId)"
          Write-Host "TF_BUILD: $(TF_BUILD)"

  - deployment: DeployModels
    dependsOn: PrintSystemVariables
    environment: bot-dev
    strategy: 
      runOnce:
        deploy:
          steps:
          - template: templates/deployModels.yaml
            parameters:
              sourceDirectory: "$(Build.SourcesDirectory)/${{ parameters.botProjectDirectory }}"
              yamlDirectory: "$(Build.SourcesDirectory)/${{ parameters.buildYamlDirectory }}"
              botName: "${{ parameters.botName }}"
              luisAuthoringKey: "${{ parameters.luisAuthoringKey }}"
              luisAuthoringRegion: "${{ parameters.luisAuthoringRegion }}"
              qnaSubscriptionKey: "${{ parameters.qnaSubscriptionKey }}"
  - deployment: DeployAzureFunctionApp
    environment: bot-dev
    dependsOn: DeployModels
    strategy:
      runOnce:
        deploy:
          steps:
          - template: templates/deployAzureFunctionApp.yaml
            parameters:
              azureServiceConnection: "${{ parameters.azureServiceConnection }}"
              functionAppName: "${{ parameters.functionAppName }}"
              resourceGroupName: "${{ parameters.resourceGroupName }}"
              botProjectFile: "$(Build.SourcesDirectory)/${{ parameters.botProjectDirectory }}/${{ parameters.botProjectName }}"
              botName: "${{ parameters.botName }}"
              microsoftAppId: "${{ parameters.microsoftAppId }}"
              microsoftAppPassword: "${{ parameters.microsoftAppPassword }}"
              luisEndpoint: "${{ parameters.luisEndpoint }}"
              luisEndpointKey: "${{ parameters.luisEndpointKey }}"
              qnaSubscriptionKey: "${{ parameters.qnaSubscriptionKey }}"
              qnaEndpointKey: "${{ parameters.qnaEndpointKey }}"
              qnaHostName: "${{ parameters.qnaHostName }}"
              qnaKnowledgebaseId: "${{ parameters.qnaKnowledgebaseId }}"
              qnaRegion: "${{ parameters.qnaRegion }}"