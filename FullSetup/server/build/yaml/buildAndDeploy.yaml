trigger:
  - none

pool:
  vmImage: ubuntu-latest

stages:
- stage: BuildStage
  variables:
  - group: bot-dev-ivo-dev
  jobs:
  - job: buildApps
    steps:
    - task: PowerShell@2
      displayName: Before Install prerequisites
      inputs:
        targetType: inline
        script: |
          Write-Host "Get System.DefaultWorkingDirectory content: $(System.DefaultWorkingDirectory):"
          Get-ChildItem -Path $(System.DefaultWorkingDirectory) -Recurse | Out-String -Width 160
    
    - template: templates/installPrerequisites.yaml

    - task: PowerShell@2
      displayName: After Install prerequisites
      inputs:
        targetType: inline
        script: |
          Write-Host "Get System.DefaultWorkingDirectory content: $(System.DefaultWorkingDirectory):"
          Get-ChildItem -Path $(System.DefaultWorkingDirectory) -Recurse | Out-String -Width 160
    
    - template: templates/crossTrainLUISModels.yaml
      parameters:
        sourceDirectory: "$(System.DefaultWorkingDirectory)/$(botProjectDirectory)"
    
    - task: PowerShell@2
      displayName: Before Install prerequisites
      inputs:
        targetType: inline
        script: |
         Write-Host "BotProjectFile: $(System.DefaultWorkingDirectory)/$(botProjectDirectory)/$(botProjectName).csproj"
    
    - template: templates/buildAzureFunctionApp.yaml
      parameters:
        botProjectFile: "$(System.DefaultWorkingDirectory)/$(botProjectDirectory)/$(botProjectName).csproj"
    
    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/$(buildYamlDirectory)/templates'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(System.DefaultWorkingDirectory)/output/zipDeploy/Pipeline-Files.zip'
        replaceExistingArchive: true
    
    # Publish output artifacts to Azure DevOps
    # just a comment
    - task: PublishBuildArtifacts@1
      displayName: "Publish build artifacts"
      inputs:
        pathtoPublish: "$(System.DefaultWorkingDirectory)/output/zipDeploy" 
        artifactName: "BuildArtifacts-$(Build.BuildId)"
    
    - task: PowerShell@2
      displayName: List Files Post Publish (Out-String -Width 160)
      inputs:
        targetType: inline
        script: |
          Write-Host "Get System.DefaultWorkingDirectory content: $(System.DefaultWorkingDirectory):"
          Get-ChildItem -Path $(System.DefaultWorkingDirectory) -Recurse | Out-String -Width 160
    
    - task: PowerShell@2
      displayName: List Files Post Publish (ls -R)
      inputs:
        targetType: inline
        script: |
          Write-Host "Get System.DefaultWorkingDirectory content: $(System.DefaultWorkingDirectory):"
          ls -R $(System.DefaultWorkingDirectory)

    # Helper to output the working folder directory contents for diagnostics
    - task: PowerShell@2
      displayName: "Dir workspace"
      continueOnError: true
      condition: succeededOrFailed()
      inputs:
        targetType: "inline"
        script: |
          cd ..
          ls -R
  
- stage: DeployDevStage
  variables:
  - group: bot-dev-ivo-dev
  dependsOn: BuildStage
  jobs:
  - job: PrintSystemVariables
    steps:
    - task: PowerShell@2
      displayName: "Print system variables"
      inputs:
        targetType: "inline"
        script: |
          Write-Host "Agent.BuildDirectory: $(Agent.BuildDirectory)"
          Write-Host "Agent.HomeDirectory: $(Agent.HomeDirectory)"
          Write-Host "Agent.Id: $(Agent.Id)"
          Write-Host "Agent.JobStatus: $(Agent.JobStatus)"
          Write-Host "Agent.MachineName: $(Agent.MachineName)"
          Write-Host "Agent.Name: $(Agent.Name)"
          Write-Host "Agent.OS: $(Agent.OS)"
          Write-Host "Agent.OSArchitecture: $(Agent.OSArchitecture)"
          Write-Host "Agent.TempDirectory: $(Agent.TempDirectory)"
          Write-Host "Agent.ToolsDirectory: $(Agent.ToolsDirectory)"
          Write-Host "Agent.WorkFolder: $(Agent.WorkFolder)"
          Write-Host "Build.ArtifactStagingDirectory: $(Build.ArtifactStagingDirectory)"
          Write-Host "Build.BuildId: $(Build.BuildId)"
          Write-Host "Build.BuildNumber: $(Build.BuildNumber)"
          Write-Host "Build.BuildUri: $(Build.BuildUri)"
          Write-Host "Build.BinariesDirectory: $(Build.BinariesDirectory)"
          Write-Host "Build.ContainerId: $(Build.ContainerId)"
          Write-Host "Build.DefinitionName: $(Build.DefinitionName)"
          Write-Host "Build.DefinitionVersion: $(Build.DefinitionVersion)"
          Write-Host "Build.QueuedBy: $(Build.QueuedBy)"
          Write-Host "Build.QueuedById: $(Build.QueuedById)"
          Write-Host "Build.Reason: $(Build.Reason)"
          Write-Host "Build.Repository.LocalPath: $(Build.Repository.LocalPath)"
          Write-Host "Build.Repository.ID: $(Build.Repository.ID)"
          Write-Host "Build.Repository.Name: $(Build.Repository.Name)"
          Write-Host "Build.Repository.Provider: $(Build.Repository.Provider)"
          Write-Host "Build.Repository.Uri: $(Build.Repository.Uri)"
          Write-Host "Build.RequestedFor: $(Build.RequestedFor)"
          Write-Host "Build.RequestedForEmail): $(Build.RequestedForEmail)"
          Write-Host "Build.RequestedForId: $(Build.RequestedForId)"
          Write-Host "Build.SourceBranch: $(Build.SourceBranch)"
          Write-Host "Build.SourceBranchName: $(Build.SourceBranchName)"
          Write-Host "Build.SourcesDirectory: $(Build.SourcesDirectory)"
          Write-Host "Build.SourceVersion: $(Build.SourceVersion)"
          Write-Host "Build.SourceVersionMessage): $(Build.SourceVersionMessage)"
          Write-Host "Build.StagingDirectory: $(Build.StagingDirectory)"
          Write-Host "Build.Repository.Git.SubmoduleCheckout: $(Build.Repository.Git.SubmoduleCheckout)"
          Write-Host "Common.TestResultsDirectory: $(Common.TestResultsDirectory)"
          Write-Host "Pipeline.Workspace: $(Pipeline.Workspace)"
          Write-Host "System.AccessToken: $(System.AccessToken)"
          Write-Host "System.ArtifactsDirectory: $(System.ArtifactsDirectory)"
          Write-Host "System.CollectionId: $(System.CollectionId)"
          Write-Host "System.CollectionUri: $(System.CollectionUri)"
          Write-Host "System.DefaultWorkingDirectory: $(System.DefaultWorkingDirectory)"
          Write-Host "System.DefinitionId: $(System.DefinitionId)"
          Write-Host "System.HostType: $(System.HostType)"
          Write-Host "System.JobAttempt: $(System.JobAttempt)"
          Write-Host "System.JobDisplayName: $(System.JobDisplayName)"
          Write-Host "System.JobId: $(System.JobId)"
          Write-Host "System.JobName: $(System.JobName)"
          Write-Host "System.PhaseAttempt: $(System.PhaseAttempt)"
          Write-Host "System.PhaseDisplayName: $(System.PhaseDisplayName)"
          Write-Host "System.PhaseName: $(System.PhaseName)"
          Write-Host "System.PlanId: $(System.PlanId)"
          Write-Host "System.PullRequest.IsFork: $(System.PullRequest.IsFork)"
          Write-Host "System.StageAttempt: $(System.StageAttempt)"
          Write-Host "System.StageDisplayName: $(System.StageDisplayName)"
          Write-Host "System.StageName: $(System.StageName)"
          Write-Host "System.TeamFoundationCollectionUri: $(System.TeamFoundationCollectionUri)"
          Write-Host "System.TeamProject: $(System.TeamProject)"
          Write-Host "System.TeamProjectId: $(System.TeamProjectId)"
          Write-Host "System.TimelineId: $(System.TimelineId)"
          Write-Host "TF_BUILD: $(TF_BUILD)"
          Write-Host "Display the content of System.ArtifactsDirectory: $(System.ArtifactsDirectory)"
          Get-ChildItem -Path $(System.ArtifactsDirectory) -Recurse | Out-String -Width 160
          Write-Host "Display the content of Pipeline.Workspace: $(Pipeline.Workspace)"
          Get-ChildItem -Path $(Pipeline.Workspace) -Recurse | Out-String -Width 160

  - deployment: DeployModels
    dependsOn: PrintSystemVariables
    environment: bot-dev
    strategy: 
      runOnce:
        deploy:
          steps:
            - task: NodeTool@0
              displayName: 'Use Node 13.x'
              inputs:
                versionSpec: 13.x
            - task: Npm@1
              displayName: 'Use BF CLI'
              inputs:
                command: 'custom'
                customCommand: 'install -g @microsoft/botframework-cli'
            - download: none
            - task: DownloadPipelineArtifact@2
              displayName: 'Download Build Artifacts'
              inputs:
                patterns: '**/*.zip'
                path: '$(System.ArtifactsDirectory)'
            - task: ExtractFiles@1
              inputs:
                archiveFilePatterns: '$(System.ArtifactsDirectory)/BuildArtifacts-$(Build.BuildId)/$(botProjectName).zip'
                destinationFolder: '$(System.ArtifactsDirectory)/drop/$(botProjectName)'
                cleanDestinationFolder: false
                overwriteExistingFiles: true
            - task: ExtractFiles@1
              inputs:
                archiveFilePatterns: '$(System.ArtifactsDirectory)/BuildArtifacts-$(Build.BuildId)/Pipeline-Files.zip'
                destinationFolder: '$(System.ArtifactsDirectory)/drop/templates'
                cleanDestinationFolder: false
                overwriteExistingFiles: true
            - task: PowerShell@2
              displayName: "Print system variables and folder contents"
              inputs:
                targetType: "inline"
                script: |
                  Write-Host "Display the content of System.ArtifactsDirectory: $(System.ArtifactsDirectory):"
                  Get-ChildItem -Path $(System.ArtifactsDirectory) â€“Recurse | Out-String -Width 160
                  Write-Host "Display the content of Build.SourcesDirectory: $(Build.SourcesDirectory):"
                  Get-ChildItem -Path $(Build.SourcesDirectory) -Recurse | Out-String -Width 160
                  Write-Host "Display the content of System.DefaultWorkingDirectory: $(System.DefaultWorkingDirectory):"
                  Get-ChildItem -Path $(System.DefaultWorkingDirectory) -Recurse | Out-String -Width 160
            - template: templates/deployModels.yaml
              parameters:
                sourceDirectory: "$(System.ArtifactsDirectory)/drop/$(botProjectName)"
                yamlTemplatesDirectory: "$(System.ArtifactsDirectory)/drop/templates"
                botName: $(botName)
                luisAuthoringKey: $(luisAuthoringKey)
                luisAuthoringRegion: $(luisAuthoringRegion)
                qnaSubscriptionKey: $(qnaSubscriptionKey)
            - task: DeleteFiles@1
              inputs:
                SourceFolder: "$(System.ArtifactsDirectory)/drop/$(botProjectName)/settings"
                Contents: "mysettings.json"
            - task: PowerShell@2
              displayName: "Print system variables and folder contents"
              inputs:
                targetType: "inline"
                script: |
                  Write-Host "Display the content of System.ArtifactsDirectory)/drop/botProjectName/settings: $(System.ArtifactsDirectory)/drop/$(botProjectName)/settings:"
                  Get-ChildItem -Path "$(System.ArtifactsDirectory)/drop/$(botProjectName)/settings" â€“Recurse | Out-String -Width 160
            - task: PowerShell@2
              displayName: 'Copy Specific Config'
              inputs:
                targetType: inline
                script: Copy-Item -Path "$(System.ArtifactsDirectory)/drop/$(botProjectName)/settings/mysettings.development.json" -Destination "$(System.ArtifactsDirectory)/drop/$(botProjectName)/settings/mysettings.json"
            - task: PowerShell@2
              displayName: "Print system variables and folder contents"
              inputs:
                targetType: "inline"
                script: |
                  Write-Host "Display the content of System.ArtifactsDirectory)/drop/botProjectName/settings: $(System.ArtifactsDirectory)/drop/$(botProjectName)/settings:"
                  Get-ChildItem -Path "$(System.ArtifactsDirectory)/drop/$(botProjectName)/settings" â€“Recurse | Out-String -Width 160
            - task: ArchiveFiles@2
              inputs:
                rootFolderOrFile: '$(System.ArtifactsDirectory)/drop/$(botProjectName)'
                includeRootFolder: false
                archiveType: 'zip'
                archiveFile: '$(System.ArtifactsDirectory)/output/zipDeploy/$(botProjectName).zip'
                replaceExistingArchive: true
            - template: templates/deployAzureFunctionApp.yaml
              parameters:
                azureServiceConnection: $(AzureServiceConnection)
                functionAppName: $(functionAppName)
                resourceGroupName: $(resourceGroupName)
                microsoftAppId: $(microsoftAppId)
                microsoftAppPassword: $(microsoftAppPassword)
                luisEndpoint: $(luisEndpoint)
                luisEndpointKey: $(luisEndpointKey)
                qnaSubscriptionKey: $(qnaSubscriptionKey)
                qnaEndpointKey: $(qnaEndpointKey)
                qnaHostName: $(qnaHostName)
                qnaKnowledgebaseId: $(qnaKnowledgebaseId)
                qnaRegion: $(qnaRegion)
                artifactFilePath: "$(System.ArtifactsDirectory)/output/zipDeploy/$(botProjectName).zip"